// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Plan {
  FREE
  PRO
}

model Tenant {
  id               String       @id @default(dbgenerated("concat('tnt_', replace(cast(gen_random_uuid() as text), '-', ''))")) @db.Text
  name             String?
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
  stripeCustomerId String?
  plan             Plan         @default(FREE)
  expirationDate   DateTime? // NULL -> means no expiration
  inviteKey        String       @unique @default(dbgenerated("replace(cast(gen_random_uuid() as text), '-', '')")) @db.Text
  users            User[]
  conversions      Conversion[]
}

model User {
  id          String       @id @default(dbgenerated("concat('usr_', replace(cast(gen_random_uuid() as text), '-', ''))")) @db.Text
  email       String       @unique
  name        String?
  avatar      String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  tenantId    String
  tenant      Tenant       @relation(fields: [tenantId], references: [id])
  conversions Conversion[]
}

enum ConversionStatus {
  PENDING
  PROCESSING
  DONE
  ERROR
}

model Conversion {
  id           String           @id @default(dbgenerated("concat('cnv_', replace(cast(gen_random_uuid() as text), '-', ''))")) @db.Text
  status       ConversionStatus
  currentStage Int
  error        String?
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
  tenantId     String?
  tenant       Tenant?          @relation(fields: [tenantId], references: [id])
  userId       String?
  user         User?            @relation(fields: [userId], references: [id])
  stages       Stage[]
}

model Stage {
  id           String     @id @default(dbgenerated("concat('stg_', replace(cast(gen_random_uuid() as text), '-', ''))")) @db.Text
  mime         String
  order        Int
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  artifacts    Artifact[]
  conversion   Conversion @relation(fields: [conversionId], references: [id])
  conversionId String     @db.Text
}

model Artifact {
  id        String   @id @default(dbgenerated("concat('art_', replace(cast(gen_random_uuid() as text), '-', ''))")) @db.Text
  order     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  stage     Stage    @relation(fields: [stageId], references: [id])
  stageId   String   @db.Text
}
